version: 2.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      back_end:
        default: "bckend${CIRCLE_WORKFLOW_ID:0:7}"
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "DESTROY STACKS"
            #aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive

            aws cloudformation delete-stack --stack-name bckend${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name frntend${CIRCLE_WORKFLOW_ID:0:7}
            #exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: cec89a7b-efb7-4073-a329-074f88fea64c" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            echo 'the key: ' migration_${CIRCLE_WORKFLOW_ID}
            echo "the id is: " $SUCCESS

            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              ls -la
              npm install
              npm run migrations:revert
              exit 1
            fi
jobs:
  # Build Front-end
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  #Build Back-end
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install package.json
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  #Test Front-end
  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
          # Your job code here
      - run:
          name: test front-end
          command: |
            cd frontend
            npm install jest
            npm run test

  #Test Back-end
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: test back-end
          command: |
            cd backend
            npm install jest
            npm run test

  #Scan Front-end pacakages & security holes
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: scan front-end
          command: |
            cd frontend
            #npm audit fix
            npm audit fix --audit-level=critical --force

  #Scan Back-end pacakages & security holes
  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: scan back-end dependencies
          command: |
            cd backend
            #npm audit fix
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli

    steps:
      # Checkout code from git
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --tags Project=udapeople \
            --stack-name "bckend${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --region=us-west-2

      # Backend deploy infra
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            serverIP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Project,Values=udapeople" --output text)
            echo $serverIP >> .circleci/ansible/inventory.txt
            curl -H "Content-Type: text/plain" -H "token: 2c4942df-cbd5-462a-9ca4-a60cccd9f0af" --request PUT --data "$serverIP" https://api.memstash.io/values/backendip
            cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      #Store 
      - run:
          name: Backend ID
          command: |
            backendIP=$(curl -H "token: 2c4942df-cbd5-462a-9ca4-a60cccd9f0af" --request GET https://api.memstash.io/values/backendip)
            echo "The IP is: " $backendIP

      #Frontend deploy infra
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --tags Project=udapeople \
            --stack-name "frntend${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --region=us-west-2

      # Here's where you will add some code to rollback on failure
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["28:ee:81:3a:67:68:8e:4d:82:8e:7c:42:58:42:75:5b"]

      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm
            pip install awscli
            echo PWD
            pwd
            touch backend/.env
            echo ENVIRONMENT=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            
            ls -la backend
            cat backend/.env

            cd ~/project/.circleci/ansible/
            ansible-playbook -i inventory.txt configure-server.yml 
            

#      - run:
#          name: Configure server
#          command: |
#            cd ~/project/.circleci/ansible/
#            ansible-playbook -i inventory.txt configure-server.yml 
            #exit 1
      # Here's where you will add some code to rollback on failure      
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      #- amazoncli
      - restore_cache:
          keys: [backend-build]

      - run:
          name: awscli install
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3
            sudo apt-get -qq install awscli

      - run:
          name: Run migrations
          command: |
            cd backend && npm install
            #npm run build
            #npm audit fix --force
            
            cat .env
            
            echo 'DUMP MIGRATIONS'
            echo 'hello world!!' > migrations_dump.txt
            npm run migrations >> migrations_dump.txt
            echo "I AM HERE!!" 
            pwd
            ls -la
            
            echo 'DISPLAY CONTENTS'
            cat migrations_dump.txt
            echo '*****************'
            

      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -H "Content-Type: text/plain" -H "token: cec89a7b-efb7-4073-a329-074f88fea64c" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
              echo migration_${CIRCLE_WORKFLOW_ID}
              echo "1"
            else
              curl -H "Content-Type: text/plain" -H "token: cec89a7b-efb7-4073-a329-074f88fea64c" --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
              echo migration_${CIRCLE_WORKFLOW_ID}
              echo "0"
            fi
            exit 1

      #- revert-migrations
      - destroy-environment

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
